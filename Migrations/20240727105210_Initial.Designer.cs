// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Your_Health.Server.Data;

#nullable disable

namespace Your_Health.server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240727105210_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Your_Health.Server.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocId")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DocId");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("appointments");

                    b.HasData(
                        new
                        {
                            AppointmentId = 1,
                            Date = new DateTime(2024, 7, 28, 13, 52, 9, 636, DateTimeKind.Local).AddTicks(9595),
                            Description = "Checkup",
                            DocId = 1,
                            IsConfirmed = true,
                            PatientId = 1
                        },
                        new
                        {
                            AppointmentId = 2,
                            Date = new DateTime(2024, 7, 29, 13, 52, 9, 636, DateTimeKind.Local).AddTicks(9659),
                            Description = "Follow-up",
                            DocId = 2,
                            IsConfirmed = false,
                            PatientId = 2
                        },
                        new
                        {
                            AppointmentId = 3,
                            Date = new DateTime(2024, 7, 30, 13, 52, 9, 636, DateTimeKind.Local).AddTicks(9663),
                            Description = "Consultation",
                            DocId = 3,
                            IsConfirmed = true,
                            PatientId = 3
                        },
                        new
                        {
                            AppointmentId = 4,
                            Date = new DateTime(2024, 7, 31, 13, 52, 9, 636, DateTimeKind.Local).AddTicks(9667),
                            Description = "Routine Check",
                            DocId = 4,
                            IsConfirmed = false,
                            PatientId = 4
                        },
                        new
                        {
                            AppointmentId = 5,
                            Date = new DateTime(2024, 8, 1, 13, 52, 9, 636, DateTimeKind.Local).AddTicks(9670),
                            Description = "Surgery",
                            DocId = 5,
                            IsConfirmed = true,
                            PatientId = 5
                        },
                        new
                        {
                            AppointmentId = 6,
                            Date = new DateTime(2024, 8, 2, 13, 52, 9, 636, DateTimeKind.Local).AddTicks(9673),
                            Description = "Vaccination",
                            DocId = 6,
                            IsConfirmed = false,
                            PatientId = 6
                        },
                        new
                        {
                            AppointmentId = 7,
                            Date = new DateTime(2024, 8, 3, 13, 52, 9, 636, DateTimeKind.Local).AddTicks(9676),
                            Description = "Dental Check",
                            DocId = 7,
                            IsConfirmed = true,
                            PatientId = 7
                        },
                        new
                        {
                            AppointmentId = 8,
                            Date = new DateTime(2024, 8, 4, 13, 52, 9, 636, DateTimeKind.Local).AddTicks(9680),
                            Description = "Eye Exam",
                            DocId = 8,
                            IsConfirmed = false,
                            PatientId = 8
                        },
                        new
                        {
                            AppointmentId = 9,
                            Date = new DateTime(2024, 8, 5, 13, 52, 9, 636, DateTimeKind.Local).AddTicks(9683),
                            Description = "Physical Therapy",
                            DocId = 9,
                            IsConfirmed = true,
                            PatientId = 9
                        },
                        new
                        {
                            AppointmentId = 10,
                            Date = new DateTime(2024, 8, 6, 13, 52, 9, 636, DateTimeKind.Local).AddTicks(9690),
                            Description = "Dermatology",
                            DocId = 10,
                            IsConfirmed = false,
                            PatientId = 10
                        },
                        new
                        {
                            AppointmentId = 11,
                            Date = new DateTime(2024, 8, 7, 13, 52, 9, 636, DateTimeKind.Local).AddTicks(9693),
                            Description = "Neurology",
                            DocId = 11,
                            IsConfirmed = true,
                            PatientId = 11
                        },
                        new
                        {
                            AppointmentId = 12,
                            Date = new DateTime(2024, 8, 8, 13, 52, 9, 636, DateTimeKind.Local).AddTicks(9696),
                            Description = "Orthopedics",
                            DocId = 12,
                            IsConfirmed = false,
                            PatientId = 12
                        },
                        new
                        {
                            AppointmentId = 13,
                            Date = new DateTime(2024, 8, 9, 13, 52, 9, 636, DateTimeKind.Local).AddTicks(9700),
                            Description = "Cardiology",
                            DocId = 13,
                            IsConfirmed = true,
                            PatientId = 13
                        },
                        new
                        {
                            AppointmentId = 14,
                            Date = new DateTime(2024, 8, 10, 13, 52, 9, 636, DateTimeKind.Local).AddTicks(9703),
                            Description = "ENT Check",
                            DocId = 14,
                            IsConfirmed = false,
                            PatientId = 14
                        },
                        new
                        {
                            AppointmentId = 15,
                            Date = new DateTime(2024, 8, 11, 13, 52, 9, 636, DateTimeKind.Local).AddTicks(9706),
                            Description = "Gastroenterology",
                            DocId = 15,
                            IsConfirmed = true,
                            PatientId = 15
                        },
                        new
                        {
                            AppointmentId = 16,
                            Date = new DateTime(2024, 8, 12, 13, 52, 9, 636, DateTimeKind.Local).AddTicks(9709),
                            Description = "Psychiatry",
                            DocId = 16,
                            IsConfirmed = false,
                            PatientId = 16
                        },
                        new
                        {
                            AppointmentId = 17,
                            Date = new DateTime(2024, 8, 13, 13, 52, 9, 636, DateTimeKind.Local).AddTicks(9712),
                            Description = "Urology",
                            DocId = 17,
                            IsConfirmed = true,
                            PatientId = 17
                        },
                        new
                        {
                            AppointmentId = 18,
                            Date = new DateTime(2024, 8, 14, 13, 52, 9, 636, DateTimeKind.Local).AddTicks(9715),
                            Description = "Gynecology",
                            DocId = 18,
                            IsConfirmed = false,
                            PatientId = 18
                        },
                        new
                        {
                            AppointmentId = 19,
                            Date = new DateTime(2024, 8, 15, 13, 52, 9, 636, DateTimeKind.Local).AddTicks(9718),
                            Description = "Pediatrics",
                            DocId = 19,
                            IsConfirmed = true,
                            PatientId = 19
                        },
                        new
                        {
                            AppointmentId = 20,
                            Date = new DateTime(2024, 8, 16, 13, 52, 9, 636, DateTimeKind.Local).AddTicks(9722),
                            Description = "Oncology",
                            DocId = 20,
                            IsConfirmed = false,
                            PatientId = 20
                        });
                });

            modelBuilder.Entity("Your_Health.Server.Models.Doctor", b =>
                {
                    b.Property<int>("DocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocId"));

                    b.Property<string>("DocFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpecialityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phone")
                        .HasColumnType("int");

                    b.HasKey("DocId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("doctors");

                    b.HasData(
                        new
                        {
                            DocId = 1,
                            DocFirstName = "John",
                            DocLastName = "Smith",
                            SpecialityId = 1,
                            email = "john.smith@example.com",
                            phone = 1091095506
                        },
                        new
                        {
                            DocId = 2,
                            DocFirstName = "Emily",
                            DocLastName = "Johnson",
                            SpecialityId = 2,
                            email = "emily.johnson@example.com",
                            phone = 1024657893
                        },
                        new
                        {
                            DocId = 3,
                            DocFirstName = "Michael",
                            DocLastName = "Williams",
                            SpecialityId = 3,
                            email = "mic@gmail.com",
                            phone = 1025657893
                        },
                        new
                        {
                            DocId = 4,
                            DocFirstName = "Jessica",
                            DocLastName = "Brown",
                            SpecialityId = 4,
                            email = "jessica.brown@example.com",
                            phone = 1098765432
                        },
                        new
                        {
                            DocId = 5,
                            DocFirstName = "Daniel",
                            DocLastName = "Davis",
                            SpecialityId = 5,
                            email = "dan.davis@example.com",
                            phone = 1034567890
                        },
                        new
                        {
                            DocId = 6,
                            DocFirstName = "Sophia",
                            DocLastName = "Miller",
                            SpecialityId = 6,
                            email = "sophia.miller@example.com",
                            phone = 1045678901
                        },
                        new
                        {
                            DocId = 7,
                            DocFirstName = "James",
                            DocLastName = "Wilson",
                            SpecialityId = 7,
                            email = "james.wilson@example.com",
                            phone = 1056789012
                        },
                        new
                        {
                            DocId = 8,
                            DocFirstName = "Olivia",
                            DocLastName = "Moore",
                            SpecialityId = 8,
                            email = "olivia.moore@example.com",
                            phone = 1067890123
                        },
                        new
                        {
                            DocId = 9,
                            DocFirstName = "Liam",
                            DocLastName = "Taylor",
                            SpecialityId = 9,
                            email = "liam.taylor@example.com",
                            phone = 1078901234
                        },
                        new
                        {
                            DocId = 10,
                            DocFirstName = "Ava",
                            DocLastName = "Anderson",
                            SpecialityId = 10,
                            email = "ava.anderson@example.com",
                            phone = 1089012345
                        },
                        new
                        {
                            DocId = 11,
                            DocFirstName = "Ethan",
                            DocLastName = "Thomas",
                            SpecialityId = 1,
                            email = "ethan.thomas@example.com",
                            phone = 1090123456
                        },
                        new
                        {
                            DocId = 12,
                            DocFirstName = "Isabella",
                            DocLastName = "Jackson",
                            SpecialityId = 2,
                            email = "isabella.jackson@example.com",
                            phone = 1091234567
                        },
                        new
                        {
                            DocId = 13,
                            DocFirstName = "Mason",
                            DocLastName = "White",
                            SpecialityId = 2,
                            email = "mason.white@example.com",
                            phone = 1092345678
                        },
                        new
                        {
                            DocId = 14,
                            DocFirstName = "Mia",
                            DocLastName = "Harris",
                            SpecialityId = 4,
                            email = "mia.harris@example.com",
                            phone = 1093456789
                        },
                        new
                        {
                            DocId = 15,
                            DocFirstName = "Alexander",
                            DocLastName = "Martin",
                            SpecialityId = 1,
                            email = "alex.martin@example.com",
                            phone = 1094567890
                        },
                        new
                        {
                            DocId = 16,
                            DocFirstName = "Charlotte",
                            DocLastName = "Thompson",
                            SpecialityId = 6,
                            email = "charlotte.thompson@example.com",
                            phone = 1095678901
                        },
                        new
                        {
                            DocId = 17,
                            DocFirstName = "Henry",
                            DocLastName = "Garcia",
                            SpecialityId = 6,
                            email = "henry.garcia@example.com",
                            phone = 1096789012
                        },
                        new
                        {
                            DocId = 18,
                            DocFirstName = "Amelia",
                            DocLastName = "Martinez",
                            SpecialityId = 5,
                            email = "amelia.martinez@example.com",
                            phone = 1097890123
                        },
                        new
                        {
                            DocId = 19,
                            DocFirstName = "Benjamin",
                            DocLastName = "Robinson",
                            SpecialityId = 2,
                            email = "benjamin.robinson@example.com",
                            phone = 1098901234
                        },
                        new
                        {
                            DocId = 20,
                            DocFirstName = "Harper",
                            DocLastName = "Clark",
                            SpecialityId = 7,
                            email = "harper.clark@example.com",
                            phone = 1099012345
                        });
                });

            modelBuilder.Entity("Your_Health.Server.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("DocId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDiagnosed")
                        .HasColumnType("bit");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phone")
                        .HasColumnType("int");

                    b.HasKey("PatientId");

                    b.HasIndex("DocId");

                    b.ToTable("patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            AppointmentId = 0,
                            DocId = 1,
                            IsDiagnosed = false,
                            PatientName = "John Doe",
                            phone = 1234567890
                        },
                        new
                        {
                            PatientId = 2,
                            AppointmentId = 0,
                            DocId = 2,
                            IsDiagnosed = true,
                            PatientName = "Jane Smith",
                            phone = 345678901
                        },
                        new
                        {
                            PatientId = 3,
                            AppointmentId = 0,
                            DocId = 3,
                            IsDiagnosed = false,
                            PatientName = "Robert Brown",
                            phone = 456789012
                        },
                        new
                        {
                            PatientId = 4,
                            AppointmentId = 0,
                            DocId = 4,
                            IsDiagnosed = true,
                            PatientName = "Emily Davis",
                            phone = 567890123
                        },
                        new
                        {
                            PatientId = 5,
                            AppointmentId = 0,
                            DocId = 5,
                            IsDiagnosed = false,
                            PatientName = "Michael Johnson",
                            phone = 678901234
                        },
                        new
                        {
                            PatientId = 6,
                            AppointmentId = 0,
                            DocId = 6,
                            IsDiagnosed = true,
                            PatientName = "Jessica Wilson",
                            phone = 789012345
                        },
                        new
                        {
                            PatientId = 7,
                            AppointmentId = 0,
                            DocId = 7,
                            IsDiagnosed = false,
                            PatientName = "David Martinez",
                            phone = 890123456
                        },
                        new
                        {
                            PatientId = 8,
                            AppointmentId = 0,
                            DocId = 8,
                            IsDiagnosed = true,
                            PatientName = "Sarah Lee",
                            phone = 901234567
                        },
                        new
                        {
                            PatientId = 9,
                            AppointmentId = 0,
                            DocId = 9,
                            IsDiagnosed = false,
                            PatientName = "Daniel Hernandez",
                            phone = 912345678
                        },
                        new
                        {
                            PatientId = 10,
                            AppointmentId = 0,
                            DocId = 10,
                            IsDiagnosed = true,
                            PatientName = "Laura Clark",
                            phone = 1012345678
                        },
                        new
                        {
                            PatientId = 11,
                            AppointmentId = 0,
                            DocId = 11,
                            IsDiagnosed = false,
                            PatientName = "Kevin Lewis",
                            phone = 1123456789
                        },
                        new
                        {
                            PatientId = 12,
                            AppointmentId = 0,
                            DocId = 12,
                            IsDiagnosed = true,
                            PatientName = "Sophia Walker",
                            phone = 1234567891
                        },
                        new
                        {
                            PatientId = 13,
                            AppointmentId = 0,
                            DocId = 13,
                            IsDiagnosed = false,
                            PatientName = "Christopher Moore",
                            phone = 1345678901
                        },
                        new
                        {
                            PatientId = 14,
                            AppointmentId = 0,
                            DocId = 14,
                            IsDiagnosed = true,
                            PatientName = "Amanda White",
                            phone = 1456789012
                        },
                        new
                        {
                            PatientId = 15,
                            AppointmentId = 0,
                            DocId = 15,
                            IsDiagnosed = false,
                            PatientName = "Matthew Harris",
                            phone = 1567890123
                        },
                        new
                        {
                            PatientId = 16,
                            AppointmentId = 0,
                            DocId = 16,
                            IsDiagnosed = true,
                            PatientName = "Olivia Clark",
                            phone = 1678901234
                        },
                        new
                        {
                            PatientId = 17,
                            AppointmentId = 0,
                            DocId = 17,
                            IsDiagnosed = false,
                            PatientName = "Joshua Lewis",
                            phone = 1789012345
                        },
                        new
                        {
                            PatientId = 18,
                            AppointmentId = 0,
                            DocId = 18,
                            IsDiagnosed = true,
                            PatientName = "Abigail Young",
                            phone = 1890123456
                        },
                        new
                        {
                            PatientId = 19,
                            AppointmentId = 0,
                            DocId = 19,
                            IsDiagnosed = false,
                            PatientName = "Brandon King",
                            phone = 1901234567
                        },
                        new
                        {
                            PatientId = 20,
                            AppointmentId = 0,
                            DocId = 20,
                            IsDiagnosed = true,
                            PatientName = "Megan Hall",
                            phone = 1234567901
                        });
                });

            modelBuilder.Entity("Your_Health.Server.Models.Speciality", b =>
                {
                    b.Property<int>("SpecialityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialityId"));

                    b.Property<string>("SpecialityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecialityId");

                    b.ToTable("Specialities");

                    b.HasData(
                        new
                        {
                            SpecialityId = 1,
                            SpecialityName = "Cardiology"
                        },
                        new
                        {
                            SpecialityId = 2,
                            SpecialityName = "Dermatology"
                        },
                        new
                        {
                            SpecialityId = 3,
                            SpecialityName = "Endocrinology"
                        },
                        new
                        {
                            SpecialityId = 4,
                            SpecialityName = "Gastroenterology"
                        },
                        new
                        {
                            SpecialityId = 5,
                            SpecialityName = "Hematology"
                        },
                        new
                        {
                            SpecialityId = 6,
                            SpecialityName = "Infectious Disease"
                        },
                        new
                        {
                            SpecialityId = 7,
                            SpecialityName = "Nephrology"
                        },
                        new
                        {
                            SpecialityId = 8,
                            SpecialityName = "Neurology"
                        },
                        new
                        {
                            SpecialityId = 9,
                            SpecialityName = "Oncology"
                        },
                        new
                        {
                            SpecialityId = 10,
                            SpecialityName = "Pulmonology"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Your_Health.Server.Models.Appointment", b =>
                {
                    b.HasOne("Your_Health.Server.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Your_Health.Server.Models.Patient", "patient")
                        .WithOne("Appointment")
                        .HasForeignKey("Your_Health.Server.Models.Appointment", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Your_Health.Server.Models.Doctor", b =>
                {
                    b.HasOne("Your_Health.Server.Models.Speciality", "speciality")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("speciality");
                });

            modelBuilder.Entity("Your_Health.Server.Models.Patient", b =>
                {
                    b.HasOne("Your_Health.Server.Models.Doctor", "doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor");
                });

            modelBuilder.Entity("Your_Health.Server.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Your_Health.Server.Models.Patient", b =>
                {
                    b.Navigation("Appointment")
                        .IsRequired();
                });

            modelBuilder.Entity("Your_Health.Server.Models.Speciality", b =>
                {
                    b.Navigation("Doctors");
                });
#pragma warning restore 612, 618
        }
    }
}
